var searchIndex = {};
searchIndex['strided'] = {"items":[[0,"","strided","Strided slices.",null,null],[3,"Items","","An iterator over shared references to the elements of a strided\nslice.",null,null],[3,"MutItems","","An iterator over mutable references to the elements of a strided\nslice.",null,null],[3,"MutStride","","A mutable strided slice. This is equivalent to `&mut [T]`, that\nonly refers to every `n`th `T`.",null,null],[3,"MutSubstrides","","An iterator over `n` mutable substrides of a given stride, each of\nwhich points to every `n`th element starting at successive\noffsets.",null,null],[3,"Stride","","A shared strided slice. This is equivalent to a `&[T]` that only\nrefers to every `n`th `T`.",null,null],[3,"Substrides","","An iterator over `n` shared substrides of a given stride, each of\nwhich points to every `n`th element starting at successive\noffsets.",null,null],[11,"next","","",0,{"inputs":[{"name":"items"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"items"}],"output":{"name":"option"}}],[11,"clone","","",0,{"inputs":[{"name":"items"}],"output":{"name":"items"}}],[11,"next","","",1,{"inputs":[{"name":"mutitems"}],"output":{"name":"option"}}],[11,"size_hint","","",1,null],[11,"next_back","","",1,{"inputs":[{"name":"mutitems"}],"output":{"name":"option"}}],[11,"cmp","","",2,{"inputs":[{"name":"mutstride"},{"name":"stride"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",2,{"inputs":[{"name":"mutstride"},{"name":"stride"}],"output":{"name":"option"}}],[11,"lt","","",2,{"inputs":[{"name":"mutstride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"le","","",2,{"inputs":[{"name":"mutstride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"gt","","",2,{"inputs":[{"name":"mutstride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"ge","","",2,{"inputs":[{"name":"mutstride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"eq","","",2,{"inputs":[{"name":"mutstride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"mutstride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"mutstride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new strided slice directly from a conventional\nslice. The return value has stride 1.",2,null],[11,"len","","Returns the number of elements accessible in `self`.",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"usize"}}],[11,"stride","","Returns the offset between successive elements of `self` as a\ncount of *elements*, not bytes.",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"usize"}}],[11,"as_mut_ptr","","Returns a pointer to the first element of this strided slice.",2,null],[11,"reborrow","","Creates a temporary copy of this strided slice.",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"stride"}}],[11,"substrides2_mut","","Breaks this strided slice into two strided slices pointing to\nalternate elements.",2,null],[11,"substrides_mut","","Returns an iterator over `n` strided subslices of `self` each\npointing to every `n`th element, starting at successive\noffsets.",2,{"inputs":[{"name":"mutstride"},{"name":"usize"}],"output":{"name":"substrides"}}],[11,"get_mut","","Returns a reference to the `n`th element of `self`, or `None`\nif `n` is out-of-bounds.",2,{"inputs":[{"name":"mutstride"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter_mut","","Returns an iterator over references to each successive element\nof `self`.",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"mutitems"}}],[11,"into_iter","","Returns an iterator over reference to each successive element\nof `self`, with the maximum possible lifetime.",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"mutitems"}}],[11,"slice_mut","","Returns a strided slice containing only the elements from\nindices `from` (inclusive) to `to` (exclusive).",2,{"inputs":[{"name":"mutstride"},{"name":"usize"},{"name":"usize"}],"output":{"name":"stride"}}],[11,"slice_from_mut","","Returns a strided slice containing only the elements from\nindex `from` (inclusive).",2,{"inputs":[{"name":"mutstride"},{"name":"usize"}],"output":{"name":"stride"}}],[11,"slice_to_mut","","Returns a strided slice containing only the elements to\nindex `to` (exclusive).",2,{"inputs":[{"name":"mutstride"},{"name":"usize"}],"output":{"name":"stride"}}],[11,"split_at_mut","","Returns two strided slices, the first with elements up to\n`idx` (exclusive) and the second with elements from `idx`.",2,null],[11,"index","","",2,{"inputs":[{"name":"mutstride"},{"name":"usize"}],"output":{"name":"t"}}],[11,"index_mut","","",2,{"inputs":[{"name":"mutstride"},{"name":"usize"}],"output":{"name":"t"}}],[11,"deref","","",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"stride"}}],[11,"next","","",3,{"inputs":[{"name":"mutsubstrides"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"cmp","","",4,{"inputs":[{"name":"stride"},{"name":"stride"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"stride"},{"name":"stride"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"stride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"stride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"stride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"stride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"eq","","",4,{"inputs":[{"name":"stride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"stride"},{"name":"stride"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"fmt","","",4,{"inputs":[{"name":"stride"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new strided slice directly from a conventional\nslice. The return value has stride 1.",4,null],[11,"len","","Returns the number of elements accessible in `self`.",4,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"stride","","Returns the offset between successive elements of `self` as a\ncount of *elements*, not bytes.",4,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"as_ptr","","Returns a pointer to the first element of this strided slice.",4,null],[11,"substrides2","","Breaks this strided slice into two strided slices pointing to\nalternate elements.",4,null],[11,"substrides","","Returns an iterator over `n` strided subslices of `self` each\npointing to every `n`th element, starting at successive\noffsets.",4,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"substrides"}}],[11,"get","","Returns a reference to the `n`th element of `self`, or `None`\nif `n` is out-of-bounds.",4,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"option"}}],[11,"iter","","Returns an iterator over references to each successive element\nof `self`.",4,{"inputs":[{"name":"stride"}],"output":{"name":"items"}}],[11,"slice","","Returns a strided slice containing only the elements from\nindices `from` (inclusive) to `to` (exclusive).",4,{"inputs":[{"name":"stride"},{"name":"usize"},{"name":"usize"}],"output":{"name":"stride"}}],[11,"slice_from","","Returns a strided slice containing only the elements from\nindex `from` (inclusive).",4,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"stride"}}],[11,"slice_to","","Returns a strided slice containing only the elements to\nindex `to` (exclusive).",4,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"stride"}}],[11,"split_at","","Returns two strided slices, the first with elements up to\n`idx` (exclusive) and the second with elements from `idx`.",4,null],[11,"index","","",4,{"inputs":[{"name":"stride"},{"name":"usize"}],"output":{"name":"t"}}],[11,"next","","",5,{"inputs":[{"name":"substrides"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"as_stride","","",4,{"inputs":[{"name":"stride"}],"output":{"name":"stride"}}],[11,"stride","","",4,{"inputs":[{"name":"stride"}],"output":{"name":"usize"}}],[11,"as_stride","","",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"stride"}}],[11,"stride","","",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"usize"}}],[11,"as_stride_mut","","",2,{"inputs":[{"name":"mutstride"}],"output":{"name":"mutstride"}}],[11,"from","","",4,{"inputs":[{"name":"stride"},{"name":"x"}],"output":{"name":"stride"}}],[11,"from","","",2,{"inputs":[{"name":"mutstride"},{"name":"x"}],"output":{"name":"mutstride"}}],[8,"Strided","","Things that can be viewed as a series of equally spaced `T`s in\nmemory.",null,null],[16,"Elem","strided::Strided","",null,null],[10,"as_stride","strided","",6,{"inputs":[{"name":"strided"}],"output":{"name":"stride"}}],[11,"stride","","",6,{"inputs":[{"name":"strided"}],"output":{"name":"usize"}}],[8,"MutStrided","","Things that can be viewed as a series of mutable equally spaced\n`T`s in memory.",null,null],[10,"as_stride_mut","","",7,{"inputs":[{"name":"mutstrided"}],"output":{"name":"mutstride"}}],[11,"stride","","",6,null]],"paths":[[3,"Items"],[3,"MutItems"],[3,"MutStride"],[3,"MutSubstrides"],[3,"Stride"],[3,"Substrides"],[8,"Strided"],[8,"MutStrided"]]};
initSearch(searchIndex);
